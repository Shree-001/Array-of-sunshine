import React, { useState, useRef, useEffect } from 'react';
import ChatMessage from './ChatMessage';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';

const ChatHistory = ({ messages, mentor, onReaction, onBookmark, onShare, isTyping }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [showSearch, setShowSearch] = useState(false);
  const messagesEndRef = useRef(null);
  const chatContainerRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef?.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  const filteredMessages = messages?.filter(message =>
    message?.content?.toLowerCase()?.includes(searchQuery?.toLowerCase())
  );

  const groupMessagesByDate = (messages) => {
    const groups = {};
    messages?.forEach(message => {
      const date = new Date(message.timestamp)?.toDateString();
      if (!groups?.[date]) {
        groups[date] = [];
      }
      groups?.[date]?.push(message);
    });
    return groups;
  };

  const formatDateHeader = (dateString) => {
    const date = new Date(dateString);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday?.setDate(yesterday?.getDate() - 1);

    if (date?.toDateString() === today?.toDateString()) {
      return 'Today';
    } else if (date?.toDateString() === yesterday?.toDateString()) {
      return 'Yesterday';
    } else {
      return date?.toLocaleDateString('en-IN', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      });
    }
  };

  const messageGroups = groupMessagesByDate(filteredMessages);

  return (
    <div className="flex-1 flex flex-col h-full">
      {/* Chat Header */}
      <div className="bg-card border-b border-border p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 rounded-full overflow-hidden border border-border">
              <img
                src={mentor?.avatar}
                alt={mentor?.name}
                className="w-full h-full object-cover"
              />
            </div>
            <div>
              <h2 className="font-medium text-foreground">{mentor?.name}</h2>
              <div className="flex items-center space-x-2 text-sm text-muted-foreground">
                <div className="w-2 h-2 bg-success rounded-full animate-gentle-pulse"></div>
                <span>Online â€¢ {mentor?.role}</span>
              </div>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <Button
              variant="ghost"
              size="sm"
              iconName="Search"
              onClick={() => setShowSearch(!showSearch)}
              className="text-muted-foreground hover:text-foreground"
            />
            <Button
              variant="ghost"
              size="sm"
              iconName="MoreVertical"
              className="text-muted-foreground hover:text-foreground"
            />
          </div>
        </div>

        {/* Search Bar */}
        {showSearch && (
          <div className="mt-4 animate-slide-in">
            <div className="relative">
              <Icon 
                name="Search" 
                size={16} 
                className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground" 
              />
              <input
                type="text"
                placeholder="Search messages..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e?.target?.value)}
                className="w-full pl-10 pr-4 py-2 bg-background border border-border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              />
              {searchQuery && (
                <Button
                  variant="ghost"
                  size="xs"
                  iconName="X"
                  onClick={() => setSearchQuery('')}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground"
                />
              )}
            </div>
          </div>
        )}
      </div>
      {/* Messages Container */}
      <div 
        ref={chatContainerRef}
        className="flex-1 overflow-y-auto p-4 space-y-6"
      >
        {Object.entries(messageGroups)?.map(([date, dayMessages]) => (
          <div key={date} className="space-y-4">
            {/* Date Header */}
            <div className="flex items-center justify-center">
              <div className="bg-muted text-muted-foreground px-3 py-1 rounded-full text-xs font-medium">
                {formatDateHeader(date)}
              </div>
            </div>

            {/* Messages for this date */}
            <div className="space-y-4">
              {dayMessages?.map((message, index) => (
                <ChatMessage
                  key={message?.id}
                  message={message}
                  mentor={mentor}
                  onReaction={onReaction}
                  onBookmark={onBookmark}
                  onShare={onShare}
                />
              ))}
            </div>
          </div>
        ))}

        {/* Typing Indicator */}
        {isTyping && (
          <div className="flex items-start space-x-3">
            <div className="w-8 h-8 rounded-full overflow-hidden border border-border">
              <img
                src={mentor?.avatar}
                alt={mentor?.name}
                className="w-full h-full object-cover"
              />
            </div>
            <div className="bg-card border border-border rounded-lg px-4 py-3 max-w-xs">
              <div className="flex items-center space-x-2">
                <span className="text-sm text-muted-foreground">{mentor?.name} is typing</span>
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Empty State */}
        {filteredMessages?.length === 0 && !isTyping && (
          <div className="flex-1 flex items-center justify-center">
            <div className="text-center space-y-4">
              <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto">
                <Icon name="MessageCircle" size={24} color="var(--color-muted-foreground)" />
              </div>
              <div>
                <h3 className="font-medium text-foreground mb-2">
                  {searchQuery ? 'No messages found' : 'Start your conversation'}
                </h3>
                <p className="text-sm text-muted-foreground">
                  {searchQuery 
                    ? `No messages match "${searchQuery}"`
                    : `Send a message to ${mentor?.name} to begin your career guidance session`
                  }
                </p>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>
      {/* Scroll to Bottom Button */}
      {messages?.length > 5 && (
        <div className="absolute bottom-20 right-6">
          <Button
            variant="outline"
            size="sm"
            iconName="ArrowDown"
            onClick={scrollToBottom}
            className="rounded-full shadow-soft-lg bg-card"
          />
        </div>
      )}
    </div>
  );
};

export default ChatHistory;
